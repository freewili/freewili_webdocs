"use strict";(self.webpackChunkfreewili_docs=self.webpackChunkfreewili_docs||[]).push([[4205],{4286:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"scripting/io-app/scripting-with-zoomio","title":"Scripting with ZoomIO for FREE-WILi - Precision GPIO Control and Integration","description":"Explore ZoomIO scripting for FREE-WILi to achieve sub-nanosecond GPIO control with native ARM assembly. Learn about ZoomIO commands, integration with the IOApp, and how to write and execute scripts for precise digital waveform generation.","source":"@site/docs/scripting/io-app/scripting-with-zoomio.md","sourceDirName":"scripting/io-app","slug":"/scripting/io-app/scripting-with-zoomio","permalink":"/scripting/io-app/scripting-with-zoomio","draft":false,"unlisted":false,"editUrl":"https://github.com/freewili/FreeWili_WebDocs/blob/main/docs/scripting/io-app/scripting-with-zoomio.md","tags":[],"version":"current","lastUpdatedAt":1758897739000,"sidebarPosition":5,"frontMatter":{"title":"Scripting with ZoomIO for FREE-WILi - Precision GPIO Control and Integration","description":"Explore ZoomIO scripting for FREE-WILi to achieve sub-nanosecond GPIO control with native ARM assembly. Learn about ZoomIO commands, integration with the IOApp, and how to write and execute scripts for precise digital waveform generation.","keywords":["FREE-WILi ZoomIO scripting","sub-nanosecond GPIO control","ZoomIO commands","ARM assembly for GPIO","FREE-WILi IOApp integration","ZoomIO examples","precision waveform generation"],"sidebar_position":5,"sidebar_label":"Scripting with ZoomIO"},"sidebar":"tutorialSidebar","previous":{"title":"Scripting with WASM","permalink":"/scripting/io-app/scripting-with-wasm"},"next":{"title":"File System Menu","permalink":"/scripting/io-app/file-system-menu"}}');var o=i(4848),r=i(8453);const s={title:"Scripting with ZoomIO for FREE-WILi - Precision GPIO Control and Integration",description:"Explore ZoomIO scripting for FREE-WILi to achieve sub-nanosecond GPIO control with native ARM assembly. Learn about ZoomIO commands, integration with the IOApp, and how to write and execute scripts for precise digital waveform generation.",keywords:["FREE-WILi ZoomIO scripting","sub-nanosecond GPIO control","ZoomIO commands","ARM assembly for GPIO","FREE-WILi IOApp integration","ZoomIO examples","precision waveform generation"],sidebar_position:5,sidebar_label:"Scripting with ZoomIO"},c="Scripting with ZoomIO",a={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"scripting-with-zoomio",children:"Scripting with ZoomIO"})}),"\n",(0,o.jsx)(t.p,{children:"ZoomIO is a scripting language that allows sub nanosecond precision control of the GPIO. Its very high level but produces native ARM assembly in the correct way to ensure design time determinism."}),"\n",(0,o.jsx)(t.p,{children:"To achieve precise determinism, native code runs in the second CPU core of the rp2040 and takes advantage of single cycle IO and the zero latency CPUs dedicated scratch 4K RAM."}),"\n",(0,o.jsx)(t.p,{children:"The IOApp integrates the ZoomIO compiler. You can simply write the source file and download to the scripts directory. The FREE-WILi will determine which engine to target based on the file extension. The ZoomIO source files have the extension zio."}),"\n",(0,o.jsx)(t.p,{children:"The code below illustrates a simple ZoomIO program. The pin is generating a waveform on pin 27 with nanosecond control of the waveform."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"setio(27, 1);\ndelay(2000);\nsetio(27, 0);\ndelay(1000);\nsetio(27, 1);\ndelay(2000);\nsetio(27, 0);\n"})}),"\n",(0,o.jsx)(t.p,{children:"The ZoomIO commands are executed in a sequence. The following commands are currently supported."}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{style:{textAlign:"center"},children:(0,o.jsx)(t.strong,{children:"Command"})}),(0,o.jsx)(t.th,{style:{textAlign:"center"},children:(0,o.jsx)(t.strong,{children:"Arguments"})}),(0,o.jsx)(t.th,{style:{textAlign:"center"},children:(0,o.jsx)(t.strong,{children:"Notes"})})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"center"},children:"setio"}),(0,o.jsxs)(t.td,{style:{textAlign:"center"},children:["(arg 1) Io pin ",(0,o.jsx)("br",{})," (arg2) state"]}),(0,o.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"center"},children:"delay"}),(0,o.jsx)(t.td,{style:{textAlign:"center"},children:"(arg1) delay in ns"}),(0,o.jsx)(t.td,{style:{textAlign:"center"},children:"32 bit value. Delay precision is based of the CPU clock (default is 125Mhz or 8ns)"})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>c});var n=i(6540);const o={},r=n.createContext(o);function s(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);