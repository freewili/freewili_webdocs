"use strict";(self.webpackChunkfreewili_docs=self.webpackChunkfreewili_docs||[]).push([[133],{9092:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"io-app/scripting-with-wasm","title":"Scripting with WebAssembly (WASM) for FREE-WILi - Setup, Compilation, and Execution","description":"Learn how to script for FREE-WILi using WebAssembly (WASM). Discover the setup and installation of WASM tools, writing and compiling scripts, and executing them on FREE-WILi. Includes guides for Ubuntu Linux and Visual Studio Code configuration.","source":"@site/docs/io-app/scripting-with-wasm.md","sourceDirName":"io-app","slug":"/io-app/scripting-with-wasm","permalink":"/io-app/scripting-with-wasm","draft":false,"unlisted":false,"editUrl":"https://github.com/freewili/FreeWili_WebDocs/blob/main/docs/io-app/scripting-with-wasm.md","tags":[],"version":"current","lastUpdatedAt":1742474567000,"sidebarPosition":4,"frontMatter":{"title":"Scripting with WebAssembly (WASM) for FREE-WILi - Setup, Compilation, and Execution","description":"Learn how to script for FREE-WILi using WebAssembly (WASM). Discover the setup and installation of WASM tools, writing and compiling scripts, and executing them on FREE-WILi. Includes guides for Ubuntu Linux and Visual Studio Code configuration.","keywords":["FREE-WILi WebAssembly scripting","WASM setup","FREE-WILi scripting","compile WASM script","FREE-WILi execution","WASI SDK","Visual Studio Code WASM","WebAssembly for FREE-WILi"],"sidebar_position":4,"sidebar_label":"Scripting with WASM"},"sidebar":"tutorialSidebar","previous":{"title":"Host USB Serial API","permalink":"/io-app/host-usb-serial-api"},"next":{"title":"Scripting with ZoomIO","permalink":"/io-app/scripting-with-zoomio"}}');var t=n(4848),r=n(8453),l=n(4294);const o={title:"Scripting with WebAssembly (WASM) for FREE-WILi - Setup, Compilation, and Execution",description:"Learn how to script for FREE-WILi using WebAssembly (WASM). Discover the setup and installation of WASM tools, writing and compiling scripts, and executing them on FREE-WILi. Includes guides for Ubuntu Linux and Visual Studio Code configuration.",keywords:["FREE-WILi WebAssembly scripting","WASM setup","FREE-WILi scripting","compile WASM script","FREE-WILi execution","WASI SDK","Visual Studio Code WASM","WebAssembly for FREE-WILi"],sidebar_position:4,sidebar_label:"Scripting with WASM"},a="Scripting with WASM",d={},c=[{value:"Introduction to WebAssembly (WASM)",id:"introduction-to-webassembly-wasm",level:2},{value:"APIs and Implementation",id:"apis-and-implementation",level:2},{value:"Recommended Toolset",id:"recommended-toolset",level:2},{value:"Execution",id:"execution",level:2},{value:"Installing the SDK",id:"installing-the-sdk",level:2},{value:"Windows 10 and Windows 11",id:"windows-10-and-windows-11",level:3},{value:"Ubuntu Linux",id:"ubuntu-linux",level:3},{value:"Writing a Script",id:"writing-a-script",level:2},{value:"Compiling the Script",id:"compiling-the-script",level:2},{value:"Ubuntu Linux Terminal",id:"ubuntu-linux-terminal",level:3},{value:"Uploading the Script",id:"uploading-the-script",level:2},{value:"Executing the Script",id:"executing-the-script",level:2},{value:"Common Issues Targeting FREE-WILi (Troubleshooting)",id:"common-issues-targeting-free-wili-troubleshooting",level:2},{value:"Ubuntu Linux",id:"ubuntu-linux-1",level:2}];function h(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"scripting-with-wasm",children:"Scripting with WASM"})}),"\n",(0,t.jsx)(i.h2,{id:"introduction-to-webassembly-wasm",children:"Introduction to WebAssembly (WASM)"}),"\n",(0,t.jsx)(i.p,{children:"WebAssembly (WASM) technology allows a program compiler to target a generic CPU architecture. The program that runs the compiled code is called a WebAssembly runtime. This technology is included in the IO app. Please note that WebAssembly has nothing to do with the Web; it is simply named after the origin of the technology."}),"\n",(0,t.jsx)(i.p,{children:"Example wasm projects are available from the FREE-WILi Github:"}),"\n","\n",(0,t.jsx)(l.A,{title:"GitHub - Example WASM project for FreeWili",description:"GitHub",link:"https://github.com/freewili/wasm-examples",imageUrl:"/img/github.png"}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)(i.p,{children:["Users can compile programs, store them in the ",(0,t.jsx)(i.strong,{children:"FREE-WILi"})," file system, and execute them either on demand or at power-up."]}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"FREE-WILi"})," uses the WASM3 runtime: ",(0,t.jsx)(i.a,{href:"https://github.com/wasm3/wasm3",children:"WASM3 on GitHub"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"apis-and-implementation",children:"APIs and Implementation"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.strong,{children:"FREE-WILi"})," IO app implements APIs to control FREE-WILi and provides them to the runtime. These APIs are defined in a header file called ",(0,t.jsx)(i.a,{href:"https://github.com/freewili/fwwasm/blob/master/include/fwwasm.h",children:"fwwasm.h"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"recommended-toolset",children:"Recommended Toolset"}),"\n",(0,t.jsxs)(i.p,{children:["The recommended toolset to compile for ",(0,t.jsx)(i.strong,{children:"FREE-WILi"})," WASM is the ",(0,t.jsx)(i.a,{href:"https://github.com/WebAssembly/wasi-sdk",children:"WASI SDK"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["For a development IDE, we recommend using ",(0,t.jsx)(i.a,{href:"https://code.visualstudio.com/",children:"Visual Studio Code"})," or ",(0,t.jsx)(i.a,{href:"https://www.jetbrains.com/clion/",children:"CLion"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"execution",children:"Execution"}),"\n",(0,t.jsxs)(i.p,{children:["After compiling your script to WebAssembly (extension ",(0,t.jsx)(i.code,{children:".wasm"}),"), you must upload the file to the FREE-WILi filesystem.  The best way to do this is with the ",(0,t.jsx)(i.a,{href:"https://pypi.org/project/freewili/",children:"freewili"})," Python library, as will be explained under ",(0,t.jsx)(i.code,{children:"Getting Started"})," below."]}),"\n",(0,t.jsxs)(i.p,{children:["After your script is uploaded to the FREE-WILi, you can have it run on startup. The script will execute every time ",(0,t.jsx)(i.strong,{children:"FREE-WILi"})," is powered on. Alternatively, you can start WASM files on demand from the serial menu, or you can start them using the ",(0,t.jsx)(i.a,{href:"https://pypi.org/project/freewili/",children:"freewili"})," Python library."]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsx)(i.p,{children:"There are a lot of different WebAssembly compilers; you can write your code in Rust, Python, C/C++, and several others."}),"\n",(0,t.jsx)(i.p,{children:"The following example will use the wasi-sdk, which comes with a clang-based C/C++ compiler."}),"\n",(0,t.jsx)(i.h2,{id:"installing-the-sdk",children:"Installing the SDK"}),"\n",(0,t.jsx)(i.h3,{id:"windows-10-and-windows-11",children:"Windows 10 and Windows 11"}),"\n",(0,t.jsxs)(i.p,{children:["There are issues with using the WASI-SDK Windows binaries in Windows 11. Therefore, we recommend installing and using ",(0,t.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/windows/wsl/",children:"Windows Subsystem for Linux"})," provided by Microsoft."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Install WSL with the following command in Command Prompt or PowerShell","\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"wsl --install\n"})}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["After installation, open the WSL app and follow the installation prompt. (You can search for WSL in Window's search bar, or you can select it in the ",(0,t.jsx)(i.a,{href:"https://learn.microsoft.com/en-us/windows/terminal/",children:"Windows Terminal"}),")"]}),"\n",(0,t.jsxs)(i.li,{children:["Once WSL has successfully installed, follow the ",(0,t.jsx)(i.code,{children:"Ubuntu Linux"})," setup and build instructions"]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"ubuntu-linux",children:"Ubuntu Linux"}),"\n",(0,t.jsxs)(i.p,{children:["In Ubuntu Linux, the quickest way to get up and running is to download the ",(0,t.jsx)(i.code,{children:".deb"})," prebuilt package from Github under ",(0,t.jsx)(i.a,{href:"https://github.com/WebAssembly/wasi-sdk/releases",children:"Releases"}),".  For Ubuntu Linux on an x86-based machine, grab the Debian package (.deb) file for x86.  In this example, the file is ",(0,t.jsx)(i.a,{href:"https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-x86_64-linux.deb",children:"wasi-sdk-24.0-x86_64-linux.deb"}),"."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Download the package with:","\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"sudo wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-24/wasi-sdk-24.0-x86_64-linux.deb\n"})}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["Then, install the package with:","\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"sudo dpkg --install wasi-sdk-24.0-x86_64-linux.deb\n"})}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["After installation, the compiler will be located here: ",(0,t.jsx)(i.code,{children:"/opt/wasi-sdk/bin/wasm32-wasi-clang++"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["If you want, you could set an alias to the wasm clang compiler with the following command:","\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"alias wasm32-wasi-clang++='/opt/wasi-sdk/bin/wasm32-wasi-clang++'\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"writing-a-script",children:"Writing a Script"}),"\n",(0,t.jsx)(i.p,{children:"Use VS Code or a text editor, and write your script.  For this example, we will use C++ and write a simple script to turn each of\r\nthe board LEDs a different color."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Make sure you have the ",(0,t.jsx)(i.a,{href:"https://github.com/freewili/fwwasm/blob/master/include/fwwasm.h",children:"fwwasm.h"})," header file"]}),"\n",(0,t.jsxs)(i.li,{children:["Copy and paste this example script below into your text editor, and save it as ",(0,t.jsx)(i.code,{children:"leds.cpp"})]}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-cpp",children:'#include "fwwasm.h"\r\n\r\n#define MAX_LOOPS 20\r\n#define NUM_LEDS 7\r\n#define DELAY_MS 50\r\n#define LED_FADE_DURATION 300\r\n\r\n//different color RGB values\r\n#define RED 0xFF0000\r\n#define PINK 0xFFC6FF\r\n#define ORANGE 0xFF7F00\r\n#define YELLOW 0xFFFF00\r\n#define GREEN 0x00FF00\r\n#define LIGHT_GREEN 0xCAFFBF\r\n#define BLUE 0x0000FF\r\n#define LIGHT_BLUE 0x9BF6FF\r\n#define INDIGO 0x4B0082\r\n#define VIOLET 0x9400D3\r\n#define MAX_COLORS 10\r\n\r\n//some macros to get color RGB components\r\n#define GET_RED(x) ((x >> 16) & 0xFF)\r\n#define GET_GREEN(x) ((x >> 8) & 0xFF)\r\n#define GET_BLUE(x) (x & 0xFF)\r\n\r\nint main()\r\n{\r\n    int rainbow[MAX_COLORS] = {RED, ORANGE, YELLOW, GREEN, LIGHT_GREEN, BLUE, LIGHT_BLUE, INDIGO, VIOLET, PINK};\r\n    int color_choice = 0;\r\n\r\n    //do the whole thing multiple times\r\n    for (int loops = 0; loops < MAX_LOOPS; loops++)\r\n    {\r\n        //set every LED one at a time\r\n        for (int led = 0; led < NUM_LEDS; led++)\r\n        {\r\n            //pick a color\r\n            int color = rainbow[color_choice];\r\n\r\n            //set the LED \r\n            setBoardLED(led, GET_RED(color), GET_GREEN(color), GET_BLUE(color), LED_FADE_DURATION, LEDManagerLEDMode::ledpulsefade);\r\n\r\n            //next time, get a new color.  If we used all of the colors, start over\r\n            color_choice++;\r\n            if (color_choice >= MAX_COLORS)\r\n                color_choice = 0;\r\n\r\n            //wait before setting the next LED\r\n            waitms(DELAY_MS);\r\n        }    \r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(i.h2,{id:"compiling-the-script",children:"Compiling the Script"}),"\n",(0,t.jsx)(i.p,{children:"At the command line, run the following:"}),"\n",(0,t.jsx)(i.h3,{id:"ubuntu-linux-terminal",children:"Ubuntu Linux Terminal"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"/opt/wasi-sdk/bin/wasm32-wasi-clang++ -O3 -s leds.cpp -o leds.wasm\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Note the ",(0,t.jsx)(i.code,{children:"-s"})," argument is ",(0,t.jsx)(i.strong,{children:"critical"})," to force the linker to strip debugging symbols from the output binary."]}),"\n",(0,t.jsxs)(i.p,{children:["After a successful compilation, the compiler should output a binary called ",(0,t.jsx)(i.code,{children:"leds.wasm"}),". This is your FREE-WILi WASM script, and you will need to upload this binary to the FREE-WILi."]}),"\n",(0,t.jsx)(i.h2,{id:"uploading-the-script",children:"Uploading the Script"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:["Note: If you are using WSL in Windows, you may need to copy over the ",(0,t.jsx)(i.code,{children:"LEDs.wasm"})," from your Linux file system to Windows file system to upload the script."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:["Install the ",(0,t.jsx)(i.code,{children:"freewili"})," Python library with:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"pip install freewili\n"})}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsxs)(i.p,{children:["Note: the ",(0,t.jsx)(i.code,{children:"freewili"})," library requires Python 3.11 or newer."]}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:"Upload your script with:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"fwi-serial -s leds.wasm -fn /scripts/leds.wasm\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"executing-the-script",children:"Executing the Script"}),"\n",(0,t.jsx)(i.p,{children:"Once the script is on the FREE-WILi's file system, there are multiple ways it can be executed:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:'From the FREE-WILi interface, you can select "Scripts" and select your script to execute it.'}),"\n",(0,t.jsxs)(i.li,{children:["From the command line, you use the ",(0,t.jsx)(i.a,{href:"https://pypi.org/project/freewili/",children:"FREE-WILi Python Library"})," with the command below to execute the script:","\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"fwi-serial -w leds.wasm\n"})}),"\n"]}),"\n",(0,t.jsxs)(i.li,{children:["From the serial terminal interface, you can select ",(0,t.jsx)(i.code,{children:"w"})," to run a script, then type ",(0,t.jsx)(i.code,{children:"leds.wasm"})," and hit enter"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"common-issues-targeting-free-wili-troubleshooting",children:"Common Issues Targeting FREE-WILi (Troubleshooting)"}),"\n",(0,t.jsxs)(i.p,{children:["Many tools compile binaries that use too  many memory pages. FREE-WILi only supports 2 (128Kb). Ensure that the stack size of your binary is limited in this way. Please see the ",(0,t.jsx)(i.a,{href:"https://github.com/freewili/wasm-examples/tree/main",children:"FREE-WILi Wasm Examples"})," for the necessary command line switches."]}),"\n",(0,t.jsx)(i.p,{children:"A good tool for troubleshooting WASM files is the WebAssembly Explorer."}),"\n",(0,t.jsx)(l.A,{title:"WebAssembly Code Explorer",description:"",link:"https://wasdk.github.io/wasmcodeexplorer/",imageUrl:""}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h1,{id:"visual-studio-code-configuration",children:"Visual Studio Code Configuration"}),"\n",(0,t.jsx)(i.p,{children:"Assuming you installed the SDK as described above, you can get Visual Studio code to recognize your WASI-SDK as follows:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Install the CMake extension for VS Code, as well as the CMake Tools extension",(0,t.jsx)(i.a,{href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools",children:"here"})]}),"\n",(0,t.jsx)(i.li,{children:"Create a file called CMakeLists.txt and place it in the root of your project"}),"\n",(0,t.jsx)(i.li,{children:"Copy and paste the following into the CMakeLists.txt"}),"\n"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'cmake_minimum_required(VERSION 3.0)\r\nproject(wasm_project)\r\n\r\nset(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s")\r\n\r\nadd_executable(leds.wasm "leds.cpp")\n'})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Create a file called CMakePresets.json and place it in the root of your project"}),"\n",(0,t.jsx)(i.li,{children:"Copy and paste the following into the CMakePresets.json"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"ubuntu-linux-1",children:"Ubuntu Linux"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{\r\n    "version": 3,\r\n    "cmakeMinimumRequired": {\r\n        "major": 3,\r\n        "minor": 16,\r\n        "patch": 0\r\n    },\r\n    "configurePresets": [\r\n        {\r\n            "name": "default",\r\n            "hidden": true,\r\n            "generator": "Ninja"\r\n        },\r\n        {\r\n            "name": "wasi",\r\n            "description": "Configure for WASI using wasi-sdk",\r\n            "inherits": "default",\r\n            "toolchainFile": "/opt/wasi-sdk/share/cmake/wasi-sdk.cmake",\r\n            "cacheVariables": {\r\n                "CMAKE_BUILD_TYPE": "Release"\r\n            }\r\n        }\r\n    ]\r\n}\n'})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Use ",(0,t.jsx)(i.code,{children:"CTRL-SHIFT-P"}),' in Visual Studio code and select "CMake: Select Configure Preset".  Select \'wasi` from the dropdown that appears.  (Note: You may need to reload VS Code for this option to appear.)']}),"\n",(0,t.jsxs)(i.li,{children:["You can now use the ",(0,t.jsx)(i.code,{children:"build"})," button in Visual Studio Code to build your WASM project with one click."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Alternatively, you can run the following CMake commands in Visual Studio Code"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["Inside the ",(0,t.jsx)(i.a,{href:"https://code.visualstudio.com/api/ux-guidelines/command-palette",children:"VSCode command Palette"})," run the      following commands:","\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:">CMake: Select Variant"})," and select ",(0,t.jsx)(i.code,{children:"MinSizeRel"})]}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:">CMake: Configure"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:">CMake: Build Target"})}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:">CMake: Select A Kit"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Make sure the kit is unspecified."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h1,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(i.p,{children:["Look at our ",(0,t.jsx)(i.a,{href:"https://github.com/freewili/fwwasm.git",children:"FWWasm Submodule"})," for supported FREE-WILi WASM APIs. You can use this module in your projects."]}),"\n",(0,t.jsxs)(i.p,{children:["There are several WASM examples written in different languages in the ",(0,t.jsx)(i.a,{href:"https://github.com/freewili/wasm-examples/tree/main",children:"FREE-WILi WASM Example repo"})]}),"\n",(0,t.jsx)(i.p,{children:"Examples of programming languages that FREE-WILi WASM supports can be found below:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/freewili/wasm-examples/tree/main/cxx",children:"CXX"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/freewili/wasm-examples/tree/main/rust",children:"Rust"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/freewili/wasm-examples/tree/main/go",children:"Go"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/freewili/wasm-examples/tree/main/zig",children:"Zig"})}),"\n"]})]})}function u(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},4294:(e,i,n)=>{n.d(i,{A:()=>a});n(6540);const s="card_t5fD",t="cardContent_yn8N",r="cardHeader_jh50",l="cardImage_zPy4";var o=n(4848);const a=e=>{let{title:i,description:n,link:a,imageUrl:d}=e;return(0,o.jsx)("a",{href:a,target:"_blank",rel:"noopener noreferrer",className:s,children:(0,o.jsxs)("div",{className:t,children:[(0,o.jsxs)("div",{className:r,children:[d&&(0,o.jsx)("img",{src:d,alt:i,className:l}),(0,o.jsx)("h3",{children:i})]}),(0,o.jsx)("p",{children:n})]})})}},8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>o});var s=n(6540);const t={},r=s.createContext(t);function l(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);