"use strict";(self.webpackChunkfreewili_docs=self.webpackChunkfreewili_docs||[]).push([[3828],{8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},9594:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"extending-with-orcas/bottlenose-wifi-orca/bottlenose-getting-started","title":"Bottlenose WiFi Orca - Getting Started Guide","description":"Quick start guide for Bottlenose WiFi Orca. Learn to set up your first WiFi project, connect to networks, and communicate with FREE-WILi in under 30 minutes.","source":"@site/docs/extending-with-orcas/bottlenose-wifi-orca/bottlenose-getting-started.md","sourceDirName":"extending-with-orcas/bottlenose-wifi-orca","slug":"/extending-with-orcas/bottlenose-wifi-orca/bottlenose-getting-started","permalink":"/extending-with-orcas/bottlenose-wifi-orca/bottlenose-getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/freewili/FreeWili_WebDocs/blob/main/docs/extending-with-orcas/bottlenose-wifi-orca/bottlenose-getting-started.md","tags":[],"version":"current","lastUpdatedAt":1758992773000,"sidebarPosition":1,"frontMatter":{"title":"Bottlenose WiFi Orca - Getting Started Guide","description":"Quick start guide for Bottlenose WiFi Orca. Learn to set up your first WiFi project, connect to networks, and communicate with FREE-WILi in under 30 minutes.","keywords":["Bottlenose getting started","ESP32-C6 tutorial","WiFi quick start","first project","Bt tutorial","network setup"],"sidebar_position":1,"sidebar_label":"Bottlenose Getting Started"},"sidebar":"tutorialSidebar","previous":{"title":"Bottlenose WiFi Orca","permalink":"/extending-with-orcas/bottlenose-wifi-orca/"},"next":{"title":"Bottlenose Hardware Hookup","permalink":"/extending-with-orcas/bottlenose-wifi-orca/bottlenose-hardware-hookup"}}');var t=i(4848),r=i(8453);const o={title:"Bottlenose WiFi Orca - Getting Started Guide",description:"Quick start guide for Bottlenose WiFi Orca. Learn to set up your first WiFi project, connect to networks, and communicate with FREE-WILi in under 30 minutes.",keywords:["Bottlenose getting started","ESP32-C6 tutorial","WiFi quick start","first project","Bt tutorial","network setup"],sidebar_position:1,sidebar_label:"Bottlenose Getting Started"},l="Bottlenose Getting Started Guide",c={},d=[{value:"What You&#39;ll Build",id:"what-youll-build",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Enable UART Orca Communication",id:"step-1-enable-uart-orca-communication",level:2},{value:"Accessing Orca Setup Settings",id:"accessing-orca-setup-settings",level:3},{value:"Configure UART Communication",id:"configure-uart-communication",level:3},{value:"Verify Configuration",id:"verify-configuration",level:3},{value:"Restart FREE-WILi",id:"restart-free-wili",level:3},{value:"Step 2: Flash Bottlenose Firmware",id:"step-2-flash-bottlenose-firmware",level:2},{value:"Hardware Preparation",id:"hardware-preparation",level:3},{value:"Method A: Flash via USB Console App",id:"method-a-flash-via-usb-console-app",level:3},{value:"Method B: Flash via FREE-WILi UI",id:"method-b-flash-via-free-wili-ui",level:3},{value:"Verify Successful Flashing",id:"verify-successful-flashing",level:3},{value:"Troubleshooting Firmware Flashing",id:"troubleshooting-firmware-flashing",level:3},{value:"Common Issues:",id:"common-issues",level:4},{value:"Understanding the Default Bottlenose Application",id:"understanding-the-default-bottlenose-application",level:3},{value:"Core Functionality",id:"core-functionality",level:4},{value:"Default App Benefits",id:"default-app-benefits",level:4},{value:"Typical Usage Scenarios",id:"typical-usage-scenarios",level:4},{value:"Step 3: Configure Bottlenose Settings",id:"step-3-configure-bottlenose-settings",level:2},{value:"Accessing Configuration Settings",id:"accessing-configuration-settings",level:3},{value:"WiFi Configuration",id:"wifi-configuration",level:3},{value:"WiFi Settings Explained:",id:"wifi-settings-explained",level:4},{value:"WiFi Configuration Example:",id:"wifi-configuration-example",level:4},{value:"Bt Configuration",id:"bt-configuration",level:3},{value:"Bt Settings Explained:",id:"bt-settings-explained",level:4},{value:"Bt Configuration Example:",id:"bt-configuration-example",level:4},{value:"WebSocket Server Configuration",id:"websocket-server-configuration",level:3},{value:"WebSocket Settings Explained:",id:"websocket-settings-explained",level:4},{value:"WebSocket Configuration Examples:",id:"websocket-configuration-examples",level:4},{value:"Configuration Workflow",id:"configuration-workflow",level:3},{value:"Basic Setup (WiFi + Web Access):",id:"basic-setup-wifi--web-access",level:4},{value:"Advanced Setup (Full Functionality):",id:"advanced-setup-full-functionality",level:4},{value:"Applying Configuration Changes",id:"applying-configuration-changes",level:3},{value:"Access Your Configured Bottlenose:",id:"access-your-configured-bottlenose",level:4},{value:"Step 4: Set Up Your Project",id:"step-4-set-up-your-project",level:2},{value:"Create New Project",id:"create-new-project",level:3},{value:"Project Configuration",id:"project-configuration",level:3},{value:"Step 5: Basic WiFi Code",id:"step-5-basic-wifi-code",level:2},{value:"Step 6: Update CMakeLists.txt",id:"step-6-update-cmakeliststxt",level:2},{value:"Step 7: Configure WiFi Credentials",id:"step-7-configure-wifi-credentials",level:2},{value:"Step 8: Build and Flash",id:"step-8-build-and-flash",level:2},{value:"Build the project",id:"build-the-project",level:3},{value:"Flash to Bottlenose",id:"flash-to-bottlenose",level:3},{value:"Monitor output",id:"monitor-output",level:3},{value:"Step 9: Add HTTP Client (Optional)",id:"step-9-add-http-client-optional",level:2},{value:"Step 10: Test Your Setup",id:"step-10-test-your-setup",level:2},{value:"Expected Results",id:"expected-results",level:3},{value:"Verify Connection",id:"verify-connection",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"WiFi Issues",id:"wifi-issues",level:3},{value:"Power Issues",id:"power-issues",level:3},{value:"Programming Issues",id:"programming-issues",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Immediate Improvements",id:"immediate-improvements",level:3},{value:"Advanced Features",id:"advanced-features",level:3},{value:"Learning Resources",id:"learning-resources",level:3},{value:"Code Repository",id:"code-repository",level:2},{value:"Community and Support",id:"community-and-support",level:2},{value:"Going Further: Custom ESP32-C6 Programming",id:"going-further-custom-esp32-c6-programming",level:2},{value:"Development Setup Requirements",id:"development-setup-requirements",level:3},{value:"Step 1: Install Development Environment",id:"step-1-install-development-environment",level:3},{value:"Option A: ESP-IDF (Recommended for Advanced Features)",id:"option-a-esp-idf-recommended-for-advanced-features",level:4},{value:"Option B: Arduino IDE (Easier for Beginners)",id:"option-b-arduino-ide-easier-for-beginners",level:4},{value:"Option C: PlatformIO (Professional IDE)",id:"option-c-platformio-professional-ide",level:4},{value:"Step 2: Hardware Connection for Programming",id:"step-2-hardware-connection-for-programming",level:3},{value:"Step 3: Basic Custom Application",id:"step-3-basic-custom-application",level:3},{value:"ESP-IDF Example - WiFi Status LED",id:"esp-idf-example---wifi-status-led",level:4},{value:"Arduino Example - Bt Beacon",id:"arduino-example---bt-beacon",level:4},{value:"Step 4: Build and Flash Custom Firmware",id:"step-4-build-and-flash-custom-firmware",level:3},{value:"ESP-IDF Method:",id:"esp-idf-method",level:4},{value:"Arduino Method:",id:"arduino-method",level:4},{value:"Step 5: Advanced Features",id:"step-5-advanced-features",level:3},{value:"Communicate with FREE-WILi",id:"communicate-with-free-wili",level:4},{value:"Programming Tips and Best Practices",id:"programming-tips-and-best-practices",level:3},{value:"Power Management",id:"power-management",level:4},{value:"Memory Optimization",id:"memory-optimization",level:4},{value:"Debugging with JTAG",id:"debugging-with-jtag",level:4},{value:"Troubleshooting Custom Programming",id:"troubleshooting-custom-programming",level:3},{value:"Common Issues:",id:"common-issues-1",level:4},{value:"Development Resources",id:"development-resources",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"bottlenose-getting-started-guide",children:"Bottlenose Getting Started Guide"})}),"\n",(0,t.jsx)(n.p,{children:"Get up and running with your Bottlenose WiFi Orca in under 30 minutes! This guide will walk you through your first project: connecting to WiFi, sending data, and communicating with FREE-WILi."}),"\n",(0,t.jsx)(n.h2,{id:"what-youll-build",children:"What You'll Build"}),"\n",(0,t.jsx)(n.p,{children:"By the end of this guide, you'll have a working WiFi system that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connects to your WiFi network automatically"}),"\n",(0,t.jsx)(n.li,{children:"Sends periodic status updates over WiFi"}),"\n",(0,t.jsx)(n.li,{children:"Communicates with FREE-WILi via UART"}),"\n",(0,t.jsx)(n.li,{children:"Displays connection status via LEDs"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before starting, make sure you have:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Bottlenose WiFi Orca properly connected to FREE-WILi (see ",(0,t.jsx)(n.a,{href:"/extending-with-orcas/bottlenose-wifi-orca/bottlenose-hardware-hookup/",children:"Hardware Hookup"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"FREE-WILi device with latest firmware installed"}),"\n",(0,t.jsx)(n.li,{children:"Computer connected to FREE-WILi (via USB or network)"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"UART Orca Communication enabled"})," for Bottlenose (see Step 1 below)"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"UART Communication Required",type:"warning",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"CRITICAL"}),": You must enable UART Orca Communication for Bottlenose in FREE-WILi settings before the module will function. Bottlenose will not work without this setting enabled."]})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"step-1-enable-uart-orca-communication",children:"Step 1: Enable UART Orca Communication"}),"\n",(0,t.jsx)(n.p,{children:"Before flashing firmware or using Bottlenose, you must first enable UART Orca Communication in FREE-WILi settings."}),"\n",(0,t.jsx)(n.h3,{id:"accessing-orca-setup-settings",children:"Accessing Orca Setup Settings"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connect to FREE-WILi"})," via USB console or web interface"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navigate to Settings"})," menu from main console"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Find Orca Setup"})," section in settings"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Access Configure Orca Communication"})," option"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"configure-uart-communication",children:"Configure UART Communication"}),"\n",(0,t.jsx)(n.p,{children:"In the Orca Setup menu, you'll see:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"========  Configure Orca Communication ========\n\nu) Orca Communication over UART [WILEye]\n\n\nEnter Letter: (q to exit)\n"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Press 'u'"})," to configure UART communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Select Bottlenose option"})," from the menu:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"========  Configure Orca Communication ========\n\n0) Off\n1) BottleNose\n2) WhaleTail\n3) WILEye\n\nOrca Communication over UART Enter Number [3]\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enter '1'"})," to select BottleNose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Save settings"})," and exit configuration menu"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"verify-configuration",children:"Verify Configuration"}),"\n",(0,t.jsx)(n.p,{children:"After setting UART communication to BottleNose:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"========  Configure Orca Communication ========\n\nu) Orca Communication over UART [BottleNose] \u2705\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The setting should now show ",(0,t.jsx)(n.strong,{children:"[BottleNose]"})," instead of the default ",(0,t.jsx)(n.strong,{children:"[WILEye]"}),"."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Why This Setting Matters",type:"tip",children:[(0,t.jsx)(n.p,{children:"The UART Orca Communication setting tells FREE-WILi which type of Orca module is connected and how to communicate with it. Each Orca module (BottleNose, WhaleTail, WILEye) has different communication protocols and capabilities."}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Bottlenose UART Parameters:"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Baud Rate"}),": 3 Mbps - Optimized for WiFi/Bt command and data transfer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flow Control"}),": CTS and RTS enabled (Hardware flow control)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data Bits"}),": 8"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stop Bits"}),": 1"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parity"}),": None"]}),"\n"]}),(0,t.jsx)(n.p,{children:"Hardware flow control ensures reliable communication for network data, terminal bridging, and configuration commands between FREE-WILi and Bottlenose."})]}),"\n",(0,t.jsx)(n.h3,{id:"restart-free-wili",children:"Restart FREE-WILi"}),"\n",(0,t.jsx)(n.p,{children:"After changing the UART communication setting:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Power cycle FREE-WILi"})," to apply the new configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Wait for full boot"})," before proceeding with firmware flashing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Verify Orca detection"})," in FREE-WILi status messages"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"step-2-flash-bottlenose-firmware",children:"Step 2: Flash Bottlenose Firmware"}),"\n",(0,t.jsx)(n.p,{children:"Before you can use Bottlenose with FREE-WILi, you need to flash the proper firmware to the ESP32-C6. The Bottlenose firmware is built into the FREE-WILi firmware and can be flashed directly from FREE-WILi."}),"\n",(0,t.jsx)(n.h3,{id:"hardware-preparation",children:"Hardware Preparation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Connect Bottlenose to FREE-WILi"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure Bottlenose is properly connected via the Orca connector"}),"\n",(0,t.jsx)(n.li,{children:"Power on your FREE-WILi device"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Locate Control Buttons"}),":\nOn the Bottlenose PCB, you'll find two buttons:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:'"BOOT" button'})," - Used to enter bootloader mode"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:'"RESET" button'})," - Used to reset the ESP32-C6"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Button Location",type:"tip",children:(0,t.jsx)(n.p,{children:'The BOOT and RESET buttons are typically located near the ESP32-C6 chip on the Bottlenose PCB. Look for small tactile buttons labeled "BOOT" and "RST" or "RESET".'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Enter Bootloader Mode"}),":\nThe ESP32-C6 must be in bootloader mode to receive firmware from FREE-WILi:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Step-by-step process:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hold down"})," the ",(0,t.jsx)(n.strong,{children:'"BOOT"'})," button and keep it pressed"]}),"\n",(0,t.jsxs)(n.li,{children:["While holding BOOT, ",(0,t.jsx)(n.strong,{children:"press and release"})," the ",(0,t.jsx)(n.strong,{children:'"RESET"'})," button (quick tap)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Release"})," the ",(0,t.jsx)(n.strong,{children:'"BOOT"'})," button"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\u2705 The ESP32-C6 is now in bootloader mode and ready to receive firmware"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Important Timing",type:"warning",children:(0,t.jsx)(n.p,{children:"Make sure to hold the BOOT button BEFORE pressing RESET, and only release BOOT after you've released RESET. This timing is critical for entering bootloader mode correctly."})}),"\n",(0,t.jsx)(n.h3,{id:"method-a-flash-via-usb-console-app",children:"Method A: Flash via USB Console App"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Connect to FREE-WILi via USB"})," and open your serial terminal application"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Navigate to ESP32 Flasher Menu"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Main Menu \u2192 Extended Menus (e) \u2192 Extended Menus (e)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Press ",(0,t.jsx)(n.code,{children:"e"})," to enter Extended Menus"]}),"\n",(0,t.jsxs)(n.li,{children:["Press ",(0,t.jsx)(n.code,{children:"e"})," again to access the ESP32 Flasher menu"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Select Bottlenose Firmware"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In the ESP32 Flasher menu, press ",(0,t.jsx)(n.code,{children:"n"})," to select the option for flashing Bottlenose firmware"]}),"\n",(0,t.jsx)(n.li,{children:'You should see: "Flash Bottlenose WiFi Orca Firmware"'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Initiate Flashing"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Follow the on-screen prompts"}),"\n",(0,t.jsx)(n.li,{children:"The console will show flashing progress"}),"\n",(0,t.jsx)(n.li,{children:'Wait for "Flashing Complete" message'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Expected Console Output:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"ESP32 Flasher Menu\n==================\nn) Flash Bottlenose WiFi Orca Firmware\nx) Return to Main Menu\n\nSelection: n\n\n[FLASHER] Detecting ESP32-C6 in bootloader mode...\n[FLASHER] ESP32-C6 detected successfully\n[FLASHER] Starting firmware flash...\n[FLASHER] Writing bootloader... [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n[FLASHER] Writing application... [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n[FLASHER] Writing partitions... [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588] 100%\n[FLASHER] Flashing completed successfully!\n[FLASHER] Resetting ESP32-C6...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"method-b-flash-via-free-wili-ui",children:"Method B: Flash via FREE-WILi UI"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Open FREE-WILi Web Interface"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connect to FREE-WILi via network or USB"}),"\n",(0,t.jsx)(n.li,{children:"Open the FREE-WILi web interface in your browser"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Navigate to Wireless Menu"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Click on the ",(0,t.jsx)(n.strong,{children:'"Wireless"'})," menu in the main navigation"]}),"\n",(0,t.jsx)(n.li,{children:"This will open the wireless configuration pages"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Find ESP32 Flasher Page"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cycle through the pages"})," in the wireless menu (use Next/Previous buttons)"]}),"\n",(0,t.jsxs)(n.li,{children:["Look for the page titled ",(0,t.jsx)(n.strong,{children:'"ESP32 Default App Flasher"'})]}),"\n",(0,t.jsx)(n.li,{children:"This page contains the firmware flashing controls"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Flash Firmware"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"On the ESP32 Default App Flasher page, you'll see options for different modules"}),"\n",(0,t.jsxs)(n.li,{children:["Find the ",(0,t.jsx)(n.strong,{children:'"Bottlenose WiFi Orca"'})," section"]}),"\n",(0,t.jsxs)(n.li,{children:["Click the ",(0,t.jsx)(n.strong,{children:'green "Flash Firmware"'})," button to initiate flashing"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Monitor Progress"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The interface will show a progress bar during flashing"}),"\n",(0,t.jsx)(n.li,{children:'Wait for the "Flashing Complete" confirmation message'}),"\n",(0,t.jsx)(n.li,{children:"The ESP32-C6 will automatically reset after successful flashing"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"verify-successful-flashing",children:"Verify Successful Flashing"}),"\n",(0,t.jsx)(n.p,{children:"After flashing completes:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Check Status Indicators"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Look for LED indicators on Bottlenose (if present)"}),"\n",(0,t.jsx)(n.li,{children:"Status LEDs should show normal operation patterns"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Verify Communication"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The FREE-WILi interface should detect the Bottlenose module"}),"\n",(0,t.jsx)(n.li,{children:"Check the Orcas menu for Bottlenose options"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Test Basic Functionality"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Try connecting to WiFi through Bottlenose"}),"\n",(0,t.jsx)(n.li,{children:"Verify Bt functionality if needed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"troubleshooting-firmware-flashing",children:"Troubleshooting Firmware Flashing"}),"\n",(0,t.jsx)(n.h4,{id:"common-issues",children:"Common Issues:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),': "ESP32-C6 not detected in bootloader mode"']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Repeat the bootloader entry process"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": Ensure BOOT button timing is correct (hold BOOT, tap RESET, release BOOT)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Verify"}),": Bottlenose is properly connected to FREE-WILi with power"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),': "Flashing failed" or "Connection timeout"']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),":","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Reset both FREE-WILi and Bottlenose"}),"\n",(0,t.jsx)(n.li,{children:"Retry entering bootloader mode"}),"\n",(0,t.jsx)(n.li,{children:"Attempt flashing again"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": USB connection is stable (for console method)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),': "No firmware available" message']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Ensure FREE-WILi firmware is up to date"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": FREE-WILi firmware includes latest Bottlenose firmware"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Action"}),": Update FREE-WILi firmware if necessary"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),": Flashing appears successful but module doesn't work"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),":","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Perform a hard reset: hold RESET button for 5 seconds"}),"\n",(0,t.jsx)(n.li,{children:"Check hardware connections"}),"\n",(0,t.jsx)(n.li,{children:"Try flashing again"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": Power supply is stable during operation"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Firmware Updates",type:"note",children:(0,t.jsx)(n.p,{children:"The Bottlenose firmware embedded in FREE-WILi may be updated with new FREE-WILi firmware releases. Check for FREE-WILi updates periodically to get the latest Bottlenose features and improvements."})}),"\n",(0,t.jsx)(n.h3,{id:"understanding-the-default-bottlenose-application",children:"Understanding the Default Bottlenose Application"}),"\n",(0,t.jsx)(n.p,{children:"Once firmware is flashed successfully, Bottlenose runs a default application that provides several key networking and communication features:"}),"\n",(0,t.jsx)(n.h4,{id:"core-functionality",children:"Core Functionality"}),"\n",(0,t.jsx)(n.p,{children:"The default Bottlenose app is designed to extend FREE-WILi's connectivity options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83c\udf10 WebSocket Terminal Bridge"})," - Bridges FREE-WILi's main terminal over WebSocket connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcf1 Bt Terminal Bridge"})," - Provides terminal access via Bt Low Energy"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udce1 WiFi Network Scanner"})," - Scans for available WiFi access points"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udd0d Bt Device Scanner"})," - Discovers nearby Bt devices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udcbb HTTP Web Browser Interface"})," - Hosts a web server for browser-based terminal access"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"default-app-benefits",children:"Default App Benefits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Remote Access"}),": Control FREE-WILi wirelessly through WiFi or Bt"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Web Integration"}),": Access FREE-WILi terminal from any web browser"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Discovery"}),": Find and connect to available networks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cross-Platform"}),": Works with phones, tablets, laptops, and other devices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No Additional Software"}),": Built-in web server requires no special apps"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"typical-usage-scenarios",children:"Typical Usage Scenarios"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Wireless Debugging"}),": Access FREE-WILi terminal without USB cable"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Remote Configuration"}),": Configure settings from across the room"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiple Users"}),": Share access through web interface"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Mobile Integration"}),": Control FREE-WILi from smartphone or tablet"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Troubleshooting"}),": Scan and analyze WiFi/Bt environments"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"step-3-configure-bottlenose-settings",children:"Step 3: Configure Bottlenose Settings"}),"\n",(0,t.jsx)(n.p,{children:"Before using Bottlenose functionality, you need to configure the networking and communication settings through FREE-WILi's configuration system."}),"\n",(0,t.jsx)(n.h3,{id:"accessing-configuration-settings",children:"Accessing Configuration Settings"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Connect to FREE-WILi"})," via USB console or web interface"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navigate to Settings"})," menu"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Find Bottlenose configuration sections"}),": WiFi, Bt, and WebSocket Server"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"wifi-configuration",children:"WiFi Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Configure Bottlenose WiFi functionality through the WiFi settings menu:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"========  Configure Wifi  ========\n\ns) Enable Wifi Station Mode [off]\nd) SSID for Wifi Station Mode []\np) Password for Wifi Station Mode []\na) Enable Access Point Mode [off]\nu) Access Point Authentication [open]\nh) Access Point hide SSID [visible]\ng) SSID for Access Point []\nx) Password for Access Point []\n"})}),"\n",(0,t.jsx)(n.h4,{id:"wifi-settings-explained",children:"WiFi Settings Explained:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Station Mode Settings:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"s)"})," ",(0,t.jsx)(n.strong,{children:"Enable Wifi Station Mode"})," - Connect Bottlenose to existing WiFi network"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"d)"})," ",(0,t.jsx)(n.strong,{children:"SSID for Station Mode"})," - Network name to connect to"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"p)"})," ",(0,t.jsx)(n.strong,{children:"Password for Station Mode"})," - Network password (leave blank for open networks)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Access Point Mode Settings:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"a)"})," ",(0,t.jsx)(n.strong,{children:"Enable Access Point Mode"})," - Create WiFi hotspot using Bottlenose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"u)"})," ",(0,t.jsx)(n.strong,{children:"Access Point Authentication"})," - Security type (open/WPA2/WPA3)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"h)"})," ",(0,t.jsx)(n.strong,{children:"Access Point Hide SSID"})," - Make hotspot visible or hidden"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"g)"})," ",(0,t.jsx)(n.strong,{children:"SSID for Access Point"}),' - Hotspot name (e.g., "Bottlenose_AP")']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"x)"})," ",(0,t.jsx)(n.strong,{children:"Password for Access Point"})," - Hotspot password (8+ characters for secured networks)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"wifi-configuration-example",children:"WiFi Configuration Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Configure WiFi for home network connection:\ns) Enable Wifi Station Mode [on]\nd) SSID for Wifi Station Mode [MyHomeWiFi]\np) Password for Wifi Station Mode [mypassword123]\na) Enable Access Point Mode [off]\n\nOr configure as mobile hotspot:\ns) Enable Wifi Station Mode [off]\na) Enable Access Point Mode [on]\nu) Access Point Authentication [WPA2]\nh) Access Point hide SSID [visible]\ng) SSID for Access Point [Bottlenose_Mobile]\nx) Password for Access Point [mobile123secure]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"bt-configuration",children:"Bt Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Configure Bottlenose Bt functionality:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"========  Configure BT  ========\n\ns) Enable BT [off]\nt) BT Terminal Bridge [off]\na) BT Advertising Name []\n"})}),"\n",(0,t.jsx)(n.h4,{id:"bt-settings-explained",children:"Bt Settings Explained:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"s)"})," ",(0,t.jsx)(n.strong,{children:"Enable BT"})," - Turn on Bt Low Energy functionality"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"t)"})," ",(0,t.jsx)(n.strong,{children:"BT Terminal Bridge"})," - Enable terminal access via Bt connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"a)"})," ",(0,t.jsx)(n.strong,{children:"BT Advertising Name"})," - Device name visible to other Bt devices"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"bt-configuration-example",children:"Bt Configuration Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Enable Bt with terminal access:\ns) Enable BT [on]\nt) BT Terminal Bridge [on]\na) BT Advertising Name [Bottlenose_Terminal_01]\n"})}),"\n",(0,t.jsx)(n.admonition,{title:"Bt Device Names",type:"tip",children:(0,t.jsx)(n.p,{children:'Choose descriptive names for easy identification when multiple Bottlenose devices are nearby. Include location or purpose in the name (e.g., "Lab_Bottlenose", "Mobile_Unit_A").'})}),"\n",(0,t.jsx)(n.h3,{id:"websocket-server-configuration",children:"WebSocket Server Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Configure the web-based terminal access:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"========  Websocket Server Configuration ========\n\nr) Start Websocket Server [on]\np) Websocket Server Port [8765]\nm) Authentication Mode [open]\nu) Authentication Username []\nd) Authentication Password []\n"})}),"\n",(0,t.jsx)(n.h4,{id:"websocket-settings-explained",children:"WebSocket Settings Explained:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"r)"})," ",(0,t.jsx)(n.strong,{children:"Start Websocket Server"})," - Enable web-based terminal access"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"p)"})," ",(0,t.jsx)(n.strong,{children:"Websocket Server Port"})," - TCP port for web connections (default: 8765)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"m)"})," ",(0,t.jsx)(n.strong,{children:"Authentication Mode"})," - Security level (open/password-protected)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"u)"})," ",(0,t.jsx)(n.strong,{children:"Authentication Username"})," - Login username (if authentication enabled)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"d)"})," ",(0,t.jsx)(n.strong,{children:"Authentication Password"})," - Login password (if authentication enabled)"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"websocket-configuration-examples",children:"WebSocket Configuration Examples:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Open Access (No Authentication):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"r) Start Websocket Server [on]\np) Websocket Server Port [8765]\nm) Authentication Mode [open]\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Secure Access (Password Protected):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"r) Start Websocket Server [on]\np) Websocket Server Port [8765]\nm) Authentication Mode [password]\nu) Authentication Username [admin]\nd) Authentication Password [secure123]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-workflow",children:"Configuration Workflow"}),"\n",(0,t.jsx)(n.h4,{id:"basic-setup-wifi--web-access",children:"Basic Setup (WiFi + Web Access):"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Configure WiFi Station Mode"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Enable WiFi Station Mode"}),"\n",(0,t.jsx)(n.li,{children:"Set your network SSID and password"}),"\n",(0,t.jsx)(n.li,{children:"Save settings"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Enable WebSocket Server"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Start WebSocket Server"}),"\n",(0,t.jsx)(n.li,{children:"Use default port 8765 or customize"}),"\n",(0,t.jsx)(n.li,{children:"Configure authentication if needed"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Test Connection"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Restart Bottlenose to apply settings"}),"\n",(0,t.jsx)(n.li,{children:"Connect to your WiFi network"}),"\n",(0,t.jsx)(n.li,{children:"Access web interface via browser"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"advanced-setup-full-functionality",children:"Advanced Setup (Full Functionality):"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Configure All Services"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Set up WiFi (Station and/or AP mode)"}),"\n",(0,t.jsx)(n.li,{children:"Enable Bt with custom device name"}),"\n",(0,t.jsx)(n.li,{children:"Configure WebSocket server with authentication"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Security Considerations"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use strong passwords for AP mode"}),"\n",(0,t.jsx)(n.li,{children:"Enable WebSocket authentication for public networks"}),"\n",(0,t.jsx)(n.li,{children:"Choose unique Bt advertising names"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Test All Interfaces"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Verify WiFi connection and web access"}),"\n",(0,t.jsx)(n.li,{children:"Test Bt terminal connectivity"}),"\n",(0,t.jsx)(n.li,{children:"Confirm WebSocket server accessibility"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"applying-configuration-changes",children:"Applying Configuration Changes"}),"\n",(0,t.jsx)(n.p,{children:"After configuring settings:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Save Configuration"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Exit settings menus to save changes"}),"\n",(0,t.jsx)(n.li,{children:"Configuration is stored in FREE-WILi's non-volatile memory"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Restart Services"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Restart FREE-WILi or power cycle to apply all settings"}),"\n",(0,t.jsx)(n.li,{children:"Bottlenose will automatically start with new configuration"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Verify Operation"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check WiFi connection status"}),"\n",(0,t.jsx)(n.li,{children:"Test Bt discoverability"}),"\n",(0,t.jsx)(n.li,{children:"Confirm web server accessibility"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"access-your-configured-bottlenose",children:"Access Your Configured Bottlenose:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Via Web Browser:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connect to same WiFi network as Bottlenose"}),"\n",(0,t.jsxs)(n.li,{children:["Navigate to: ",(0,t.jsx)(n.code,{children:"http://<bottlenose-ip>:8765"})]}),"\n",(0,t.jsx)(n.li,{children:"Use authentication credentials if configured"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Via Bt:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Scan for Bt devices"}),"\n",(0,t.jsx)(n.li,{children:"Connect to your configured device name"}),"\n",(0,t.jsx)(n.li,{children:"Access terminal through BLE app"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Via WiFi Hotspot:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connect device to Bottlenose AP"}),"\n",(0,t.jsxs)(n.li,{children:["Navigate to: ",(0,t.jsx)(n.code,{children:"http://192.168.4.1:8765"})]}),"\n",(0,t.jsx)(n.li,{children:"Access terminal interface"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"step-4-set-up-your-project",children:"Step 4: Set Up Your Project"}),"\n",(0,t.jsx)(n.h3,{id:"create-new-project",children:"Create New Project"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Clone the ESP-IDF example template\ngit clone https://github.com/espressif/esp-idf.git\ncd esp-idf/examples/get-started/hello_world\ncp -r hello_world ../../../bottlenose_first_project\ncd ../../../bottlenose_first_project\n"})}),"\n",(0,t.jsx)(n.h3,{id:"project-configuration",children:"Project Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Configure for ESP32-C6\nidf.py set-target esp32c6\n\n# Open menuconfig for additional settings\nidf.py menuconfig\n"})}),"\n",(0,t.jsx)(n.p,{children:"In menuconfig:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Navigate to ",(0,t.jsx)(n.code,{children:"Example Connection Configuration"})]}),"\n",(0,t.jsx)(n.li,{children:"Set your WiFi SSID and password"}),"\n",(0,t.jsxs)(n.li,{children:["Navigate to ",(0,t.jsx)(n.code,{children:"Component config"})," \u2192 ",(0,t.jsx)(n.code,{children:"ESP32C6-Specific"})]}),"\n",(0,t.jsx)(n.li,{children:"Configure power management settings"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"step-5-basic-wifi-code",children:"Step 5: Basic WiFi Code"}),"\n",(0,t.jsxs)(n.p,{children:["Replace the contents of ",(0,t.jsx)(n.code,{children:"main/hello_world_main.c"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <string.h>\n#include "freertos/FreeRTOS.h"\n#include "freertos/task.h"\n#include "freertos/event_groups.h"\n#include "esp_system.h"\n#include "esp_wifi.h"\n#include "esp_event.h"\n#include "esp_log.h"\n#include "nvs_flash.h"\n#include "driver/gpio.h"\n\n// WiFi credentials\n#define WIFI_SSID "YourWiFiNetwork"\n#define WIFI_PASS "YourPassword"\n\n// GPIO pins\n#define LED_WIFI_PIN    2\n#define LED_STATUS_PIN  8\n\nstatic const char *TAG = "BottlenoseDemo";\nstatic EventGroupHandle_t s_wifi_event_group;\nstatic const int WIFI_CONNECTED_BIT = BIT0;\n\nstatic void wifi_event_handler(void* arg, esp_event_base_t event_base,\n                               int32_t event_id, void* event_data) {\n    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {\n        esp_wifi_connect();\n    } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {\n        esp_wifi_connect();\n        ESP_LOGI(TAG, "Retrying WiFi connection...");\n        gpio_set_level(LED_WIFI_PIN, 0); // Turn off WiFi LED\n    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {\n        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;\n        ESP_LOGI(TAG, "Got IP:" IPSTR, IP2STR(&event->ip_info.ip));\n        xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT);\n        gpio_set_level(LED_WIFI_PIN, 1); // Turn on WiFi LED\n    }\n}\n\nvoid wifi_init_sta(void) {\n    s_wifi_event_group = xEventGroupCreate();\n\n    ESP_ERROR_CHECK(esp_netif_init());\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    esp_netif_create_default_wifi_sta();\n\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    ESP_ERROR_CHECK(esp_wifi_init(&cfg));\n\n    esp_event_handler_instance_t instance_any_id;\n    esp_event_handler_instance_t instance_got_ip;\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,\n                                                        ESP_EVENT_ANY_ID,\n                                                        &wifi_event_handler,\n                                                        NULL,\n                                                        &instance_any_id));\n    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,\n                                                        IP_EVENT_STA_GOT_IP,\n                                                        &wifi_event_handler,\n                                                        NULL,\n                                                        &instance_got_ip));\n\n    wifi_config_t wifi_config = {\n        .sta = {\n            .ssid = WIFI_SSID,\n            .password = WIFI_PASS,\n        },\n    };\n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA) );\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config) );\n    ESP_ERROR_CHECK(esp_wifi_start() );\n\n    ESP_LOGI(TAG, "WiFi initialization finished.");\n}\n\nvoid init_gpio(void) {\n    gpio_config_t io_conf = {\n        .pin_bit_mask = (1ULL << LED_WIFI_PIN) | (1ULL << LED_STATUS_PIN),\n        .mode = GPIO_MODE_OUTPUT,\n        .pull_up_en = GPIO_PULLUP_DISABLE,\n        .pull_down_en = GPIO_PULLDOWN_DISABLE,\n        .intr_type = GPIO_INTR_DISABLE\n    };\n    gpio_config(&io_conf);\n}\n\nvoid status_task(void *pvParameters) {\n    int counter = 0;\n    \n    while (1) {\n        // Blink status LED\n        gpio_set_level(LED_STATUS_PIN, counter % 2);\n        \n        // Print status every 10 seconds\n        if (counter % 10 == 0) {\n            ESP_LOGI(TAG, "System running for %d seconds", counter);\n            ESP_LOGI(TAG, "Free heap: %d bytes", esp_get_free_heap_size());\n            \n            // Check WiFi status\n            wifi_ap_record_t ap_info;\n            if (esp_wifi_sta_get_ap_info(&ap_info) == ESP_OK) {\n                ESP_LOGI(TAG, "Connected to: %s, RSSI: %d", ap_info.ssid, ap_info.rssi);\n            }\n        }\n        \n        counter++;\n        vTaskDelay(pdMS_TO_TICKS(1000));\n    }\n}\n\nvoid app_main(void) {\n    ESP_LOGI(TAG, "Bottlenose WiFi Orca - Getting Started Example");\n    ESP_LOGI(TAG, "===============================================");\n\n    // Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n\n    // Initialize GPIO\n    init_gpio();\n\n    // Initialize WiFi\n    ESP_LOGI(TAG, "Initializing WiFi...");\n    wifi_init_sta();\n\n    // Wait for connection\n    EventBits_t bits = xEventGroupWaitBits(s_wifi_event_group,\n                                           WIFI_CONNECTED_BIT,\n                                           pdFALSE,\n                                           pdFALSE,\n                                           portMAX_DELAY);\n\n    if (bits & WIFI_CONNECTED_BIT) {\n        ESP_LOGI(TAG, "Connected to WiFi successfully!");\n    } else {\n        ESP_LOGE(TAG, "Failed to connect to WiFi");\n        return;\n    }\n\n    // Start status task\n    xTaskCreate(status_task, "status_task", 4096, NULL, 5, NULL);\n\n    ESP_LOGI(TAG, "System initialized. Check the LEDs and monitor output!");\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-6-update-cmakeliststxt",children:"Step 6: Update CMakeLists.txt"}),"\n",(0,t.jsxs)(n.p,{children:["Update ",(0,t.jsx)(n.code,{children:"main/CMakeLists.txt"})," to include required components:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cmake",children:'idf_component_register(SRCS "hello_world_main.c"\n                       INCLUDE_DIRS "."\n                       REQUIRES wifi nvs_flash)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-7-configure-wifi-credentials",children:"Step 7: Configure WiFi Credentials"}),"\n",(0,t.jsx)(n.p,{children:"Edit the WiFi credentials in the code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#define WIFI_SSID "YourWiFiNetwork"    // Replace with your network name\n#define WIFI_PASS "YourPassword"       // Replace with your password\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-8-build-and-flash",children:"Step 8: Build and Flash"}),"\n",(0,t.jsx)(n.h3,{id:"build-the-project",children:"Build the project"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"idf.py build\n"})}),"\n",(0,t.jsx)(n.h3,{id:"flash-to-bottlenose",children:"Flash to Bottlenose"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"idf.py -p COM3 flash  # Replace COM3 with your port\n"})}),"\n",(0,t.jsx)(n.h3,{id:"monitor-output",children:"Monitor output"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"idf.py -p COM3 monitor\n"})}),"\n",(0,t.jsx)(n.p,{children:"You should see output like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"I (324) BottlenoseDemo: Bottlenose WiFi Orca - Getting Started Example\nI (324) BottlenoseDemo: ===============================================\nI (334) BottlenoseDemo: Initializing WiFi...\nI (344) BottlenoseDemo: WiFi initialization finished.\nI (2344) BottlenoseDemo: Connected to WiFi successfully!\nI (3344) BottlenoseDemo: System running for 0 seconds\nI (3344) BottlenoseDemo: Free heap: 290876 bytes\nI (3344) BottlenoseDemo: Connected to: YourWiFiNetwork, RSSI: -45\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-9-add-http-client-optional",children:"Step 9: Add HTTP Client (Optional)"}),"\n",(0,t.jsx)(n.p,{children:"To make your Bottlenose send data over WiFi, add this HTTP client code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include "esp_http_client.h"\n\nesp_err_t http_event_handler(esp_http_client_event_t *evt) {\n    switch(evt->event_id) {\n        case HTTP_EVENT_ERROR:\n            ESP_LOGD(TAG, "HTTP_EVENT_ERROR");\n            break;\n        case HTTP_EVENT_ON_CONNECTED:\n            ESP_LOGD(TAG, "HTTP_EVENT_ON_CONNECTED");\n            break;\n        case HTTP_EVENT_HEADERS_SENT:\n            ESP_LOGD(TAG, "HTTP_EVENT_HEADERS_SENT");\n            break;\n        case HTTP_EVENT_ON_FINISH:\n            ESP_LOGD(TAG, "HTTP_EVENT_ON_FINISH");\n            break;\n        default:\n            break;\n    }\n    return ESP_OK;\n}\n\nvoid send_http_request(void) {\n    esp_http_client_config_t config = {\n        .url = "http://httpbin.org/post",\n        .event_handler = http_event_handler,\n    };\n    \n    esp_http_client_handle_t client = esp_http_client_init(&config);\n    \n    // Set POST data\n    const char *post_data = "{\\"device\\":\\"Bottlenose\\",\\"status\\":\\"online\\"}";\n    esp_http_client_set_method(client, HTTP_METHOD_POST);\n    esp_http_client_set_header(client, "Content-Type", "application/json");\n    esp_http_client_set_post_field(client, post_data, strlen(post_data));\n    \n    // Perform request\n    esp_err_t err = esp_http_client_perform(client);\n    if (err == ESP_OK) {\n        ESP_LOGI(TAG, "HTTP POST Status = %d", esp_http_client_get_status_code(client));\n    } else {\n        ESP_LOGE(TAG, "HTTP POST request failed: %s", esp_err_to_name(err));\n    }\n    \n    esp_http_client_cleanup(client);\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-10-test-your-setup",children:"Step 10: Test Your Setup"}),"\n",(0,t.jsx)(n.h3,{id:"expected-results",children:"Expected Results"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Serial Monitor"}),": Continuous status updates and WiFi connection info"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"LEDs"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Status LED should blink every second"}),"\n",(0,t.jsx)(n.li,{children:"WiFi LED should be solid when connected"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network"}),": Device should appear in your router's connected devices list"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"verify-connection",children:"Verify Connection"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check your router's admin page for the connected device"}),"\n",(0,t.jsx)(n.li,{children:"Try pinging the IP address shown in the monitor"}),"\n",(0,t.jsx)(n.li,{children:"Monitor signal strength (RSSI) values"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"wifi-issues",children:"WiFi Issues"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),': "Failed to connect to WiFi"']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Double-check SSID and password"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": Verify 2.4GHz network (ESP32-C6 doesn't support 5GHz)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),": Frequent disconnections"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Move closer to router or check signal strength"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": Router compatibility with ESP32 devices"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"power-issues",children:"Power Issues"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),": Device resets randomly"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Check power supply stability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": USB cable quality and connection"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"programming-issues",children:"Programming Issues"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),": Flash/upload failures"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Try different baud rates or ports"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": USB drivers installation"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"Congratulations! You now have a working Bottlenose WiFi system. Here are some ideas for expanding your project:"}),"\n",(0,t.jsx)(n.h3,{id:"immediate-improvements",children:"Immediate Improvements"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add web server"})," to control the device remotely"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement MQTT client"})," for IoT communication"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add sensor reading"})," and data transmission"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Create mobile app interface"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"OTA updates"})," for wireless firmware updates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"WiFi mesh networking"})," with multiple devices"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bt configuration"})," for easy setup"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Integration with FREE-WILi commands"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"learning-resources",children:"Learning Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"bottlenose-interfacing",children:"Bottlenose Interfacing Guide"})," - Deep dive into programming"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"bottlenose-hardware-hookup",children:"Hardware Hookup Guide"})," - Physical connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"bottlenose-troubleshooting",children:"Bottlenose Troubleshooting"})," - Common problems and solutions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"bottlenose-wifi-orca",children:"Main Bottlenose Documentation"})," - Complete feature overview"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"code-repository",children:"Code Repository"}),"\n",(0,t.jsx)(n.p,{children:"The complete example code is available at:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"https://github.com/freewili/bottlenose-examples/getting-started\n"})}),"\n",(0,t.jsx)(n.h2,{id:"community-and-support",children:"Community and Support"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Forum"}),": Join the FREE-WILi community forum for questions and project sharing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub"}),": Submit issues and feature requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Check the main documentation for advanced topics"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Happy networking with your Bottlenose WiFi Orca!"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"going-further-custom-esp32-c6-programming",children:"Going Further: Custom ESP32-C6 Programming"}),"\n",(0,t.jsx)(n.p,{children:"For advanced users who want to develop custom applications on the ESP32-C6, you can program the Bottlenose directly using standard ESP32 development tools."}),"\n",(0,t.jsx)(n.h3,{id:"development-setup-requirements",children:"Development Setup Requirements"}),"\n",(0,t.jsx)(n.p,{children:"Before you begin custom programming, you'll need:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ESP-IDF or Arduino IDE"})," installed on your computer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"USB-C cable"})," for JTAG debugging and programming"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bottlenose connected to FREE-WILi"})," for power (USB port is data-only!)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ESPTool"})," for firmware flashing"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Power Requirements",type:"warning",children:(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,t.jsx)(n.strong,{children:"CRITICAL"}),": The USB-C port on Bottlenose is ",(0,t.jsx)(n.strong,{children:"DATA ONLY"})," - it does NOT provide power to the ESP32-C6. You ",(0,t.jsx)(n.strong,{children:"MUST"})," connect Bottlenose to FREE-WILi via the Orca connector to power the device, even when programming via USB."]})}),"\n",(0,t.jsx)(n.h3,{id:"step-1-install-development-environment",children:"Step 1: Install Development Environment"}),"\n",(0,t.jsx)(n.p,{children:"Choose your preferred development environment:"}),"\n",(0,t.jsx)(n.h4,{id:"option-a-esp-idf-recommended-for-advanced-features",children:"Option A: ESP-IDF (Recommended for Advanced Features)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install ESP-IDF\ngit clone -b release/v5.1 --recursive https://github.com/espressif/esp-idf.git\ncd esp-idf\n./install.sh esp32c6\n\n# Set up environment\n. ./export.sh\n"})}),"\n",(0,t.jsx)(n.h4,{id:"option-b-arduino-ide-easier-for-beginners",children:"Option B: Arduino IDE (Easier for Beginners)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Install Arduino IDE"}),"\n",(0,t.jsxs)(n.li,{children:["Add ESP32 board package: ",(0,t.jsx)(n.code,{children:"https://espressif.github.io/arduino-esp32/package_esp32_index.json"})]}),"\n",(0,t.jsxs)(n.li,{children:["Select ",(0,t.jsx)(n.strong,{children:'"ESP32C6 Dev Module"'})," as target board"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"option-c-platformio-professional-ide",children:"Option C: PlatformIO (Professional IDE)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install PlatformIO extension in VS Code\n# Create new project with board: esp32-c6-devkitc-1\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-hardware-connection-for-programming",children:"Step 2: Hardware Connection for Programming"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Power Setup"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connect Bottlenose to FREE-WILi via Orca connector (for power)"}),"\n",(0,t.jsx)(n.li,{children:"Keep FREE-WILi powered on during programming"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Programming Connection"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connect USB-C cable from computer to Bottlenose USB port"}),"\n",(0,t.jsx)(n.li,{children:"This provides JTAG debugging and programming interface"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Verify Connection"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check if ESP32-C6 is detected\nesptool.py --list-ports\n# Should show your COM port\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-3-basic-custom-application",children:"Step 3: Basic Custom Application"}),"\n",(0,t.jsx)(n.p,{children:"Here's a simple example to get you started with custom Bottlenose programming:"}),"\n",(0,t.jsx)(n.h4,{id:"esp-idf-example---wifi-status-led",children:"ESP-IDF Example - WiFi Status LED"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include "freertos/FreeRTOS.h"\n#include "freertos/task.h"\n#include "esp_wifi.h"\n#include "esp_event.h"\n#include "nvs_flash.h"\n#include "driver/gpio.h"\n#include "esp_log.h"\n\n#define WIFI_SSID "YourNetwork"\n#define WIFI_PASS "YourPassword"\n#define LED_PIN GPIO_NUM_2\n\nstatic const char *TAG = "BottlenoseCustom";\n\nstatic void wifi_event_handler(void* arg, esp_event_base_t event_base,\n                               int32_t event_id, void* event_data) {\n    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {\n        esp_wifi_connect();\n    } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {\n        gpio_set_level(LED_PIN, 0); // Turn off LED\n        esp_wifi_connect();\n        ESP_LOGI(TAG, "Retrying WiFi connection...");\n    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {\n        gpio_set_level(LED_PIN, 1); // Turn on LED\n        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;\n        ESP_LOGI(TAG, "Got IP:" IPSTR, IP2STR(&event->ip_info.ip));\n    }\n}\n\nvoid app_main(void) {\n    ESP_LOGI(TAG, "Starting Bottlenose Custom Application");\n    \n    // Initialize LED\n    gpio_config_t led_config = {\n        .pin_bit_mask = (1ULL << LED_PIN),\n        .mode = GPIO_MODE_OUTPUT,\n        .pull_up_en = GPIO_PULLUP_DISABLE,\n        .pull_down_en = GPIO_PULLDOWN_DISABLE,\n        .intr_type = GPIO_INTR_DISABLE\n    };\n    gpio_config(&led_config);\n    \n    // Initialize NVS\n    esp_err_t ret = nvs_flash_init();\n    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {\n        ESP_ERROR_CHECK(nvs_flash_erase());\n        ret = nvs_flash_init();\n    }\n    ESP_ERROR_CHECK(ret);\n    \n    // Initialize WiFi\n    ESP_ERROR_CHECK(esp_netif_init());\n    ESP_ERROR_CHECK(esp_event_loop_create_default());\n    esp_netif_create_default_wifi_sta();\n    \n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n    ESP_ERROR_CHECK(esp_wifi_init(&cfg));\n    \n    esp_event_handler_instance_register(WIFI_EVENT, ESP_EVENT_ANY_ID, \n                                       &wifi_event_handler, NULL, NULL);\n    esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, \n                                       &wifi_event_handler, NULL, NULL);\n    \n    wifi_config_t wifi_config = {\n        .sta = {\n            .ssid = WIFI_SSID,\n            .password = WIFI_PASS,\n        },\n    };\n    \n    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));\n    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));\n    ESP_ERROR_CHECK(esp_wifi_start());\n    \n    // Main application loop\n    while (1) {\n        ESP_LOGI(TAG, "Custom application running...");\n        vTaskDelay(pdMS_TO_TICKS(10000));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"arduino-example---bt-beacon",children:"Arduino Example - Bt Beacon"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include "WiFi.h"\n#include "BtSerial.h"\n\nBtSerial SerialBT;\nconst int ledPin = 2;\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(ledPin, OUTPUT);\n    \n    // Initialize Bt\n    SerialBT.begin("Bottlenose-Custom"); \n    Serial.println("Bottlenose custom firmware started!");\n    Serial.println("Bt discoverable as: Bottlenose-Custom");\n    \n    // Startup LED sequence\n    for(int i = 0; i < 5; i++) {\n        digitalWrite(ledPin, HIGH);\n        delay(200);\n        digitalWrite(ledPin, LOW);\n        delay(200);\n    }\n}\n\nvoid loop() {\n    // Handle Bt communication\n    if (SerialBT.available()) {\n        String command = SerialBT.readString();\n        command.trim();\n        \n        if (command == "LED_ON") {\n            digitalWrite(ledPin, HIGH);\n            SerialBT.println("LED turned ON");\n        } else if (command == "LED_OFF") {\n            digitalWrite(ledPin, LOW);\n            SerialBT.println("LED turned OFF");\n        } else if (command == "STATUS") {\n            SerialBT.printf("Free heap: %d bytes\\n", ESP.getFreeHeap());\n            SerialBT.printf("WiFi MAC: %s\\n", WiFi.macAddress().c_str());\n        }\n    }\n    \n    // Periodic status blink\n    digitalWrite(ledPin, HIGH);\n    delay(100);\n    digitalWrite(ledPin, LOW);\n    delay(2900);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"step-4-build-and-flash-custom-firmware",children:"Step 4: Build and Flash Custom Firmware"}),"\n",(0,t.jsx)(n.h4,{id:"esp-idf-method",children:"ESP-IDF Method:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create project directory\nmkdir bottlenose-custom && cd bottlenose-custom\nidf.py create-project bottlenose-app\n\n# Set target to ESP32-C6\nidf.py set-target esp32c6\n\n# Build the project\nidf.py build\n\n# Flash to Bottlenose (make sure it's powered via FREE-WILi!)\nidf.py -p COM12 flash\n\n# Monitor serial output\nidf.py -p COM12 monitor\n"})}),"\n",(0,t.jsx)(n.h4,{id:"arduino-method",children:"Arduino Method:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Select Board"}),": Tools \u2192 Board \u2192 ESP32 Arduino \u2192 ESP32C6 Dev Module"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Select Port"}),": Tools \u2192 Port \u2192 (your COM port)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configure Settings"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Flash Mode: QIO"}),"\n",(0,t.jsx)(n.li,{children:"Flash Size: 4MB"}),"\n",(0,t.jsx)(n.li,{children:"Flash Frequency: 80MHz"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Upload"}),": Click Upload button"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-5-advanced-features",children:"Step 5: Advanced Features"}),"\n",(0,t.jsx)(n.h4,{id:"communicate-with-free-wili",children:"Communicate with FREE-WILi"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'// UART communication with FREE-WILi\n#include "driver/uart.h"\n\n#define UART_FREEWILI UART_NUM_1\n#define BUF_SIZE 1024\n\nvoid init_freewili_uart(void) {\n    uart_config_t uart_config = {\n        .baud_rate = 115200,\n        .data_bits = UART_DATA_8_BITS,\n        .parity = UART_PARITY_DISABLE,\n        .stop_bits = UART_STOP_BITS_1,\n        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,\n    };\n    \n    uart_param_config(UART_FREEWILI, &uart_config);\n    uart_set_pin(UART_FREEWILI, 4, 5, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);\n    uart_driver_install(UART_FREEWILI, BUF_SIZE * 2, 0, 0, NULL, 0);\n}\n\nvoid send_to_freewili(const char* data) {\n    uart_write_bytes(UART_FREEWILI, data, strlen(data));\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"programming-tips-and-best-practices",children:"Programming Tips and Best Practices"}),"\n",(0,t.jsx)(n.h4,{id:"power-management",children:"Power Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'// Configure power saving for battery applications\n#include "esp_pm.h"\n\nesp_pm_config_esp32c6_t pm_config = {\n    .max_freq_mhz = 160,\n    .min_freq_mhz = 10,\n    .light_sleep_enable = true\n};\nesp_pm_configure(&pm_config);\n'})}),"\n",(0,t.jsx)(n.h4,{id:"memory-optimization",children:"Memory Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'// Monitor memory usage\nvoid check_memory(void) {\n    printf("Free heap: %d bytes\\n", esp_get_free_heap_size());\n    printf("Minimum free heap: %d bytes\\n", esp_get_minimum_free_heap_size());\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"debugging-with-jtag",children:"Debugging with JTAG"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Use OpenOCD for debugging\nopenocd -f board/esp32c6-builtin.cfg\n\n# In another terminal, connect GDB\nxtensa-esp32c6-elf-gdb build/your-app.elf\n(gdb) target remote :3333\n(gdb) monitor reset halt\n(gdb) continue\n"})}),"\n",(0,t.jsx)(n.h3,{id:"troubleshooting-custom-programming",children:"Troubleshooting Custom Programming"}),"\n",(0,t.jsx)(n.h4,{id:"common-issues-1",children:"Common Issues:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),': "Device not found" during flashing']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Ensure Bottlenose is powered via FREE-WILi"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": USB cable is data-capable (not just charging cable)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),': "Boot mode not detected"']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Hold BOOT button on ESP32-C6 while connecting USB"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,t.jsx)(n.code,{children:"esptool.py --before default_reset"})," option"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),": High power consumption"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Enable power management and use sleep modes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": Disable unused peripherals in your code"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem"}),": Communication with FREE-WILi fails"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Verify UART pin configuration matches hardware"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Check"}),": Baud rate and protocol settings"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"development-resources",children:"Development Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ESP32-C6 Documentation"}),": ",(0,t.jsx)(n.a,{href:"https://docs.espressif.com/projects/esp-idf/en/latest/esp32c6/",children:"Espressif ESP32-C6 Docs"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Arduino ESP32"}),": ",(0,t.jsx)(n.a,{href:"https://docs.espressif.com/projects/arduino-esp32/en/latest/",children:"Arduino ESP32 Reference"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PlatformIO"}),": ",(0,t.jsx)(n.a,{href:"https://docs.platformio.org/en/latest/platforms/espressif32.html",children:"PlatformIO ESP32 Platform"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Example Code"}),": Check the FREE-WILi GitHub repository for advanced examples"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Happy coding!"})," Your Bottlenose WiFi Orca is now ready for custom development while maintaining integration with the FREE-WILi ecosystem! \ud83d\ude80"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);