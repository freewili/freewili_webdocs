"use strict";(self.webpackChunkfreewili_docs=self.webpackChunkfreewili_docs||[]).push([[909],{4830:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"extending-with-orcas/bottlenose-wifi-orca/bottlenose-hardware-hookup","title":"Bottlenose WiFi Orca - Hardware Hookup Guide","description":"Complete hardware hookup guide for Bottlenose WiFi Orca. Learn how to connect power, configure WiFi, and interface with FREE-WILi modules.","source":"@site/docs/extending-with-orcas/bottlenose-wifi-orca/bottlenose-hardware-hookup.md","sourceDirName":"extending-with-orcas/bottlenose-wifi-orca","slug":"/extending-with-orcas/bottlenose-wifi-orca/bottlenose-hardware-hookup","permalink":"/extending-with-orcas/bottlenose-wifi-orca/bottlenose-hardware-hookup","draft":false,"unlisted":false,"editUrl":"https://github.com/freewili/FreeWili_WebDocs/blob/main/docs/extending-with-orcas/bottlenose-wifi-orca/bottlenose-hardware-hookup.md","tags":[],"version":"current","lastUpdatedAt":1760134850000,"sidebarPosition":1,"frontMatter":{"title":"Bottlenose WiFi Orca - Hardware Hookup Guide","description":"Complete hardware hookup guide for Bottlenose WiFi Orca. Learn how to connect power, configure WiFi, and interface with FREE-WILi modules.","keywords":["Bottlenose hardware hookup","ESP32-C6 connections","WiFi setup","USB-C","FREE-WILi Orca connection","hardware setup guide"],"sidebar_position":1,"sidebar_label":"Bottlenose Hardware Hookup"},"sidebar":"tutorialSidebar","previous":{"title":"Bottlenose WiFi Orca","permalink":"/extending-with-orcas/bottlenose-wifi-orca/"},"next":{"title":"Bottlenose Getting Started","permalink":"/extending-with-orcas/bottlenose-wifi-orca/bottlenose-setup-and-interfacing"}}');var s=i(4848),r=i(8453);const o={title:"Bottlenose WiFi Orca - Hardware Hookup Guide",description:"Complete hardware hookup guide for Bottlenose WiFi Orca. Learn how to connect power, configure WiFi, and interface with FREE-WILi modules.",keywords:["Bottlenose hardware hookup","ESP32-C6 connections","WiFi setup","USB-C","FREE-WILi Orca connection","hardware setup guide"],sidebar_position:1,sidebar_label:"Bottlenose Hardware Hookup"},d="Bottlenose Hardware Hookup Guide",l={},c=[{value:"Required Components",id:"required-components",level:2},{value:"Physical Connections",id:"physical-connections",level:2},{value:"Connecting to FREE-WILi",id:"connecting-to-free-wili",level:3},{value:"Communication between ESP32-C6 and FREE-WILi",id:"communication-between-esp32-c6-and-free-wili",level:3},{value:"UART Pinout",id:"uart-pinout",level:4},{value:"GPIO and Expansion",id:"gpio-and-expansion",level:2},{value:"CN2 Connector Pinout",id:"cn2-connector-pinout",level:3},{value:"Signal Descriptions",id:"signal-descriptions",level:3},{value:"Qwiic Connector",id:"qwiic-connector",level:3}];function a(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"bottlenose-hardware-hookup-guide",children:"Bottlenose Hardware Hookup Guide"})}),"\n",(0,s.jsx)(n.p,{children:"This guide covers the physical setup and connections for the Bottlenose WiFi Orca module."}),"\n",(0,s.jsx)(n.h2,{id:"required-components",children:"Required Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"1 x Bottlenose WiFi Orca (ESP32-C6)"}),"\n",(0,s.jsx)(n.li,{children:"1 x FREE-WILi"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"physical-connections",children:"Physical Connections"}),"\n",(0,s.jsx)(n.h3,{id:"connecting-to-free-wili",children:"Connecting to FREE-WILi"}),"\n",(0,s.jsx)(n.p,{children:"Connecting the Bottlenose Orca to FREE-WILi is as simple as connecting the two 20-pin connectors together."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"bottlenose-hardware-connection",src:i(9616).A+"",title:"bottlenose-hardware-connection",width:"922",height:"507"})}),"\n",(0,s.jsxs)(n.admonition,{title:"USB Does Not Power the Bottlenose",type:"warning",children:[(0,s.jsx)(n.p,{children:"The Bottlenose Orca can only be powered through the 20-pin connector, meaning that FREE-WILi powers it via its 3.3V power rail."}),(0,s.jsx)(n.p,{children:"The USB-C connector is only designed to access the ESP32's USB debug port for flashing custom user code and logging."})]}),"\n",(0,s.jsx)(n.h3,{id:"communication-between-esp32-c6-and-free-wili",children:"Communication between ESP32-C6 and FREE-WILi"}),"\n",(0,s.jsx)(n.p,{children:"The Bottlenose WiFi Orca communicates with FREE-WILi through the Orca connector interface using UART communication."}),"\n",(0,s.jsx)(n.h4,{id:"uart-pinout",children:"UART Pinout"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"ESP32-C6 Pin"}),(0,s.jsx)(n.th,{children:"FREE-WILi Pin"}),(0,s.jsx)(n.th,{children:"Function"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"ESP_5V"}),(0,s.jsx)(n.td,{children:"5V OUT"}),(0,s.jsx)(n.td,{children:"Power Supply (5V)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GPIO16"}),(0,s.jsx)(n.td,{children:"UART1_TX_Out"}),(0,s.jsx)(n.td,{children:"Transmit Data (FREE-WILi \u2192 ESP32)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GPIO17"}),(0,s.jsx)(n.td,{children:"UART1_RX_IN"}),(0,s.jsx)(n.td,{children:"Receive Data (ESP32 \u2192 FREE-WILi)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GPIO4"}),(0,s.jsx)(n.td,{children:"UART1_CTS_IN"}),(0,s.jsx)(n.td,{children:"Clear to Send (Hardware Flow Control)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GPIO5"}),(0,s.jsx)(n.td,{children:"UART1_RTS_OUT"}),(0,s.jsx)(n.td,{children:"Request to Send (Hardware Flow Control)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GND"}),(0,s.jsx)(n.td,{children:"GND"}),(0,s.jsx)(n.td,{children:"Ground Reference"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Both device's UART is configured with the following parameters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"3 Mbps Baudrate"})," - Optimized for WiFi command and data transfer"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CTS and RTS Controls Enabled"})," - Hardware flow control for reliable transmission"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"8 Data Bits"})," - Standard data frame size"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1 Stop Bit"})," - Standard frame termination"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No Parity"})," - Error detection handled at higher protocol levels"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"gpio-and-expansion",children:"GPIO and Expansion"}),"\n",(0,s.jsxs)(n.p,{children:["FREE-WILi still has several I/O pins available since Bottlenose only uses UART data pins with hardware flow control. These pins are exposed on the female 20-pin port on the Bottlenose PCB labeled as ",(0,s.jsx)(n.code,{children:"CN2"}),". The pinout for this connector is the same as FREE-WILi's except for the UART TX and RX pins."]}),"\n",(0,s.jsx)(n.admonition,{title:"Voltage Level Configuration",type:"info",children:(0,s.jsx)(n.p,{children:"Bottlenose automatically sets the V PINS IN (Pin 4) to 3.3V, meaning all GPIO logic levels will operate at 3.3V. No manual voltage configuration is required."})}),"\n",(0,s.jsx)(n.h3,{id:"cn2-connector-pinout",children:"CN2 Connector Pinout"}),"\n",(0,s.jsx)(n.p,{children:"The connector is arranged as a 2x10 header with the following pin assignments:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Pin"}),(0,s.jsx)(n.th,{children:"Signal Name"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"SPI1-CS_OUT"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"5V OUT"}),(0,s.jsx)(n.td,{children:"From FREE-WILi"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"GPIO27_OUT"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"V PINS IN"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Auto-set to 3.3V by Bottlenose"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"5"}),(0,s.jsx)(n.td,{children:"UART1_Rx_IN"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Used by Bottlenose"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"6"}),(0,s.jsx)(n.td,{children:"3.3V Out"}),(0,s.jsx)(n.td,{children:"From FREE-WILi"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"7"}),(0,s.jsx)(n.td,{children:"UART1_CTS_IN"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Used by Bottlenose"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"8"}),(0,s.jsx)(n.td,{children:"I2C 0 SCL"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"9"}),(0,s.jsx)(n.td,{children:"UART1_TX_OUT"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Used by Bottlenose"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{children:"I2C 0 SDA"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"11"}),(0,s.jsx)(n.td,{children:"UART1 RTS OUT"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Used by Bottlenose"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"12"}),(0,s.jsx)(n.td,{children:"SPI1_RX_IN"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"13"}),(0,s.jsx)(n.td,{children:"SPI1_TX_OUT"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"14"}),(0,s.jsx)(n.td,{children:"GPIO26_IN"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"15"}),(0,s.jsx)(n.td,{children:"SPI1_SCLK_OUT"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"16"}),(0,s.jsx)(n.td,{children:"SWCLK IN"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"17"}),(0,s.jsx)(n.td,{children:"GPIO25_OUT"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"18"}),(0,s.jsx)(n.td,{children:"SWDIO"}),(0,s.jsx)(n.td,{children:"Available for expansion"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"19"}),(0,s.jsx)(n.td,{children:"GND"}),(0,s.jsx)(n.td,{children:"Common ground"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{children:"GND"}),(0,s.jsx)(n.td,{children:"Common ground"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"signal-descriptions",children:"Signal Descriptions"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Power Pins:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pin 2"}),": 5V power output from FREE-WILi"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pin 4"}),": V PINS IN - ",(0,s.jsx)(n.strong,{children:"Automatically set to 3.3V by Bottlenose"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pin 6"}),": 3.3V power output from FREE-WILi"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pins 19-20"}),": Ground reference"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"UART Pins (Used by Bottlenose):"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pin 5"}),": UART1 Rx IN - Receives data from FREE-WILi"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pin 7"}),": UART1 CTS IN - Hardware flow control"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pin 9"}),": UART1 TX OUT - Transmits data to FREE-WILi"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pin 11"}),": UART1 RTS OUT - Hardware flow control"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Available Expansion Pins:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pins 8, 10"}),": I2C SCL/SDA"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pins 1, 12, 13, 15"}),": SPI Chip Select, SPI MISO, MOSI, SCLK"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pins 3, 14, 16, 17, 18"}),": GPIO27, GPIO26, SWCLK, GPIO25, SWDIO"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"qwiic-connector",children:"Qwiic Connector"}),"\n",(0,s.jsx)(n.p,{children:"The Bottlenose includes a Qwiic connector for easy plug-and-play connection to I2C sensors and modules from SparkFun's ecosystem. This connector provides access to the I2C0 bus (pins 8 and 10) with standard Qwiic pinout and 3.3V power supply."}),"\n",(0,s.jsx)(n.admonition,{title:"Qwiic Ecosystem Compatibility",type:"tip",children:(0,s.jsx)(n.p,{children:"The Qwiic connector allows you to easily chain multiple I2C devices without breadboarding or soldering, using SparkFun's extensive library of Qwiic-compatible sensors and breakout boards."})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var t=i(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},9616:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/bottlenose-hardware-connection-15c58804a485246217cfc83d29c8579e.png"}}]);